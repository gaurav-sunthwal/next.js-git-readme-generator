//@ts-nocheck
"use client";
import React, { createContext, useContext, useState } from "react";

const AppContext = createContext<any>(undefined);

export function AppWrapper({ children }: { children: React.ReactNode }) {
  let [userName, setUserName] = useState("gaurav-sunthwal");
  let [aboutMe, setAboutMe] = useState("Gaurav Sunthwal");
  const [stats1, getStatus1] = useState("");
  const [stats2, getStatus2] = useState("");
  const [stats3, getStatus3] = useState("");
  const [links, setLinks] = useState({
    facebook: "",
    X: "",
    instagram: "",
    Behance: "",
    Discord: "",
    Linkedin: "in/",
    Codepen: "",
    Youtube: "@",
    StackOverflow: "",
    Reddit: "",
    Pinterest: "",
    Twitch: "",
    Medium: "",
    Mastodon: "",
    Tiktok: "",
    Quora: "",
  });
  const [payment, setPayment] = useState({
    paypal: "",
    kofi: "",
    patreon: "",
    bmc: "",
  });
  const [skills, setSkills] = useState([]);
  const [searchfor, setSearchfor] = useState("");
  const LANGUAGESArr = [
    "Ableton",
    "Aiscript",
    "Cpp",
    "Crystal",
    "Clojure",
    "Coffeescript",
    "HTML",
    "Css",
    "Dart",
    "Forth",
    "Fortran",
    "Go",
    "Haskell",
    "Haxe",
    "Haxeflixel",
    "Java",
    "Js",
    "Julia",
    "Kotlin",
    "Lua",
    "Matlab",
    "Nim",
    "Perl",
    "Php",
    "Python",
    "R",
    "Ruby",
    "Rust",
    "Scala",
    "Shell",
    "Swift",
    "Typescript",
    "Vala",
  ];
  const Hosting = [
    "Appwrite",
    "Azure",
    "Aws",
    "Cloudflare",
    "Github",
    "Gitlab",
    "Heroku",
    "Netlify",
    "Notion",
    "Openshift",
    "Openstack",
    "Planetscale",
    "Replit",
    "Unity",
    "Unreal",
    "Supabase",
    "Vercel",
    "Wordpress",
  ];
  const allTech = [
    "Activitypub",
    "Actix",
    "Adonis",
    "Angular",
    "Ansible",
    "Apollo",
    "Astro",
    "Bevy",
    "Bootstrap",
    "Django",
    "Electron",
    "Fastapi",
    "Flask",
    "Flutter",
    "Gatsby",
    "Graphql",
    "Gtk",
    "Laravel",
    "Nextjs",
    "Nuxtjs",
    "React",
    "Redux",
    "Remix",
    "Rocket",
    "Svelte",
    "Threejs",
    "Vue",
  ];
  const Database = [
    "MySQL",
    "PostgreSQL",
    "MongoDB",
    "SQLite",
    "DynamoDB",
    "Cassandra",
    "Redis",
    "Couchbase",
    "Neo4j",
    "Firebase",
    "Elasticsearch",
  ];
  const other = [
    "Androidstudio",
    "Apple",
    "Arduino",
    "Atom",
    "Blender",
    "Eclipse",
    "Emacs",
    "Githubactions",
    "Gherkin",
    "Git",
    "Intellij",
    "Kafka",
    "Latex",
    "Linkedin",
    "Linux",
    "Markdown",
    "Mastodon",
    "Neovim",
    "Nodejs",
    "Npm",
    "Obsidian",
    "Opencv",
    "Powershell",
    "Selenium",
    "Sentry",
    "Twitter",
    "Ubuntu",
    "Vscode",
    "Windows",
    "Yarn",
  ];
  const colors = [
    "default",
    "transparent",
    "shadow_red",
    "shadow_green",
    "shadow_blue",
    "dark",
    "radical",
    "merko",
    "gruvbox",
    "gruvbox_light",
    "tokyonight",
    "onedark",
    "cobalt",
    "synthwave",
    "highcontrast",
    "dracula",
    "prussian",
    "monokai",
    "vue",
    "vue-dark",
    "shades-of-purple",
    "nightowl",
    "buefy",
    "blue-green",
    "algolia",
    "great-gatsby",
    "darcula",
    "bear",
    "solarized-dark",
    "solarized-light",
    "chartreuse-dark",
    "nord",
    "gotham",
    "material-palenight",
    "graywhite",
    "vision-friendly-dark",
    "ayu-mirage",
    "midnight-purple",
    "calm",
    "flag-india",
    "omni",
    "react",
    "jolly",
    "maroongold",
    "yeblu",
    "blueberry",
    "slateorange",
    "kacho_ga",
    "outrun",
    "ocean_dark",
    "city_lights",
    "github_dark",
    "github_dark_dimmed",
    "discord_old_blurple",
    "aura_dark",
    "panda",
    "noctis_minimus",
    "cobalt2",
    "swift",
    "aura",
    "apprentice",
    "moltack",
    "codeSTACKr",
    "rose_pine",
    "catppuccin_latte",
    "catppuccin_mocha",
    "date_night",
    "one_dark_pro",
    "rose",
    "holi",
    "neon",
    "blue_navy",
    "calm_pink",
    "ambient_gradient",
  ];
  return (
    <AppContext.Provider
      value={{
        userName,
        setUserName,
        aboutMe,
        setAboutMe,
        stats1,
        stats2,
        stats3,
        getStatus1,
        getStatus2,
        getStatus3,
        links,
        setLinks,
        skills,
        setSkills,
        searchfor,
        setSearchfor,
        LANGUAGESArr,
        Hosting,
        allTech,
        Database,
        other,
        payment,
        setPayment,
        colors,
      }}
    >
      {children}
    </AppContext.Provider>
  );
}

export function useAppContext() {
  return useContext(AppContext);
}
